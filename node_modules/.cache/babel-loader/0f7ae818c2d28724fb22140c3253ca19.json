{"ast":null,"code":"import './App.css';\nimport React from 'react';\n\nconst Ship = (shipName, shipArray) => {\n  let shipCoordinates = [];\n  let j = 0;\n\n  while (j < shipArray.length) {\n    shipCoordinates.push({\n      xCoordinate: shipArray[j],\n      yCoordinate: shipArray[j + 1],\n      hit: false,\n      sink: false,\n      name: shipName\n    });\n    j += 2;\n  }\n\n  const isSunk = () => {\n    let counter = 0;\n\n    for (let i = 0; i < shipCoordinates.length; i++) {\n      if (shipCoordinates[i].hit === true) {\n        counter++;\n      }\n    }\n\n    if (counter === shipCoordinates.length) {\n      for (let i = 0; i < shipCoordinates.length; i++) {\n        shipCoordinates[i].sink = true;\n      }\n    }\n  };\n\n  const hit = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n    for (let i = 0; i < shipCoordinates.length; i++) {\n      if (shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        shipCoordinates[i].hit = true;\n      }\n    }\n\n    isSunk();\n  };\n\n  return {\n    shipCoordinates,\n    hit\n  };\n};\n\n_c = Ship;\nexport const playerGameBoard = () => {\n  let playerCarrierArray = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n  const playerCarrier = Ship(\"carrier\", playerCarrierArray);\n  let playerBattleshipArray = [1, 1, 2, 1, 3, 1, 4, 1, 5, 1];\n  const playerBattleship = Ship(\"battleship\", playerBattleshipArray);\n  let playerCruiserArray = [1, 2, 2, 2, 3, 2];\n  const playerCruiser = Ship(\"cruiser\", playerCruiserArray);\n  let playerSubmarineArray = [1, 3, 2, 3, 3, 3];\n  const playerSubmarine = Ship(\"submarine\", playerSubmarineArray);\n  let playerDestroyerArray = [1, 4, 2, 4];\n  const playerDestroyer = Ship(\"destroyer\", playerDestroyerArray);\n  let computerPlayerMissedShots = [];\n\n  const receiveComputerAttack = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n    let targetFound = false;\n\n    for (let i = 0; i < playerDestroyer.shipCoordinates.length; i++) {\n      if (playerCarrier.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        playerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n\n      if (playerBattleship.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerBattleship.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        playerBattleship.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n\n      if (playerCruiser.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerCruiser.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        playerCruiser.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n\n      if (playerSubmarine.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerSubmarine.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        playerSubmarine.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n\n      if (playerDestroyer.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerDestroyer.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        playerDestroyer.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n    }\n\n    if (targetFound === false) {\n      computerPlayerMissedShots.push(xCoordinateChosenByEnemy);\n      computerPlayerMissedShots.push(yCoordinateChosenByEnemy);\n    }\n  };\n\n  return {\n    playerBattleship,\n    playerCruiser,\n    playerSubmarine,\n    playerCarrier,\n    playerDestroyer,\n    receiveComputerAttack,\n    computerPlayerMissedShots\n  };\n};\n\nconst computerGameBoard = () => {\n  let computerCarrierArray = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n  const computerCarrier = Ship(\"carrier\", computerCarrierArray);\n  let computerBattleshipArray = [1, 1, 2, 1, 3, 1, 4, 1, 5, 1];\n  const computerBattleship = Ship(\"battleship\", computerBattleshipArray);\n  let computerCruiserArray = [1, 2, 2, 2, 3, 2];\n  const computerCruiser = Ship(\"cruiser\", computerCruiserArray);\n  let computerSubmarineArray = [1, 3, 2, 3, 3, 3];\n  const computerSubmarine = Ship(\"submarine\", computerSubmarineArray);\n  let computerDestroyerArray = [1, 4, 2, 4];\n  const computerDestroyer = Ship(\"destroyer\", computerDestroyerArray);\n  let playerMissedShots = [];\n\n  const receivePlayerAttack = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n    let targetFound = false;\n\n    for (let i = 0; i < computerCarrier.shipCoordinates.length; i++) {\n      if (computerCarrier.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n\n      if (computerBattleship.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n\n      if (computerCruiser.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n\n      if (computerSubmarine.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n\n      if (computerDestroyer.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n        computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n        targetFound = true;\n      }\n    }\n\n    if (targetFound === false) {\n      playerMissedShots.push(xCoordinateChosenByEnemy);\n      playerMissedShots.push(yCoordinateChosenByEnemy);\n    }\n  };\n\n  return {\n    computerCarrier,\n    computerBattleship,\n    computerCruiser,\n    computerSubmarine,\n    computerDestroyer,\n    receivePlayerAttack,\n    playerMissedShots\n  };\n};\n\nconst computerShips = computerGameBoard();\n\nconst player = (x, y) => {\n  computerShips.receivePlayerAttack(x, y);\n};\n\nexport const playerShips = playerGameBoard();\nexport const computerPlayer = () => {\n  let allComputerChoices = [9, 9, 8, 8];\n  let computerChoice = [];\n\n  function randomNum() {\n    //computerChoice.push(Math.floor(Math.random() * Math.floor(11)));\n    //computerChoice.push(Math.floor(Math.random() * Math.floor(11)));\n    computerChoice.push(9);\n    computerChoice.push(8);\n  }\n\n  while (computerChoice.length < 2) {\n    randomNum();\n  }\n\n  let counter = 0;\n\n  for (let i = 0; i < allComputerChoices.length; i += 2) {\n    if (allComputerChoices[i] !== computerChoice[0] && allComputerChoices[i + 1] !== computerChoice[1]) {\n      counter += 1;\n    }\n  }\n\n  if (counter === allComputerChoices.length * 0.5) {\n    allComputerChoices = allComputerChoices.concat(computerChoice);\n    playerShips.receiveComputerAttack(computerChoice[0], computerChoice[1]);\n  }\n\n  allComputerChoices = allComputerChoices.concat(computerChoice);\n  computerChoice = [];\n  return {\n    counter,\n    computerChoice,\n    allComputerChoices\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Ship\");","map":{"version":3,"sources":["/Users/loulau/Documents/react/project-battleship-game/src/App.js"],"names":["React","Ship","shipName","shipArray","shipCoordinates","j","length","push","xCoordinate","yCoordinate","hit","sink","name","isSunk","counter","i","xCoordinateChosenByEnemy","yCoordinateChosenByEnemy","playerGameBoard","playerCarrierArray","playerCarrier","playerBattleshipArray","playerBattleship","playerCruiserArray","playerCruiser","playerSubmarineArray","playerSubmarine","playerDestroyerArray","playerDestroyer","computerPlayerMissedShots","receiveComputerAttack","targetFound","computerGameBoard","computerCarrierArray","computerCarrier","computerBattleshipArray","computerBattleship","computerCruiserArray","computerCruiser","computerSubmarineArray","computerSubmarine","computerDestroyerArray","computerDestroyer","playerMissedShots","receivePlayerAttack","computerShips","player","x","y","playerShips","computerPlayer","allComputerChoices","computerChoice","randomNum","concat"],"mappings":"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","sourcesContent":["import './App.css'\nimport React from 'react';\n \n\nconst Ship = (shipName, shipArray) => {\n    \n    let shipCoordinates = [];\n    \n    let j = 0;\n\n    while (j < shipArray.length) {\n\n      shipCoordinates.push({xCoordinate: shipArray[j], yCoordinate: shipArray[j+1], \n        hit: false, sink: false, name: shipName });\n\n      j += 2;\n\n    }\n\n    const isSunk = () => {\n      let counter = 0;\n      for (let i = 0; i < shipCoordinates.length; i++) {\n        if (shipCoordinates[i].hit === true) {\n          counter++;\n        }\n      }\n      if (counter === shipCoordinates.length) {\n        for (let i = 0; i < shipCoordinates.length; i++) {\n          shipCoordinates[i].sink = true;\n            \n        }\n      }\n    };\n    \n\n    const hit = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {  \n\n      for (let i = 0; i < shipCoordinates.length; i++) {\n        if (shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n        shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          shipCoordinates[i].hit = true;\n        }\n      }\n\n      isSunk(); \n      \n    };\n    \n  \n    return {shipCoordinates, hit}; \n  \n  }\n\n\n  export const playerGameBoard = () => {\n    \n    let playerCarrierArray = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    const playerCarrier = Ship(\"carrier\", playerCarrierArray);\n\n    let playerBattleshipArray = [1, 1, 2, 1, 3, 1, 4, 1, 5, 1];\n    const playerBattleship = Ship(\"battleship\", playerBattleshipArray);\n\n    let playerCruiserArray = [1, 2, 2, 2, 3, 2];\n    const playerCruiser = Ship(\"cruiser\", playerCruiserArray);\n    \n    let playerSubmarineArray = [1, 3, 2, 3, 3, 3];\n    const playerSubmarine = Ship(\"submarine\", playerSubmarineArray);\n       \n    let playerDestroyerArray = [1, 4, 2, 4];\n    const playerDestroyer = Ship(\"destroyer\", playerDestroyerArray);\n    \n    let computerPlayerMissedShots = [];\n    \n\n    const receiveComputerAttack = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n\n      let targetFound = false;\n\n      for (let i = 0; i < playerDestroyer.shipCoordinates.length; i++) {\n        \n        if (playerCarrier.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          playerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            playerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n        \n        if (playerBattleship.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          playerBattleship.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            playerBattleship.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n\n        if (playerCruiser.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          playerCruiser.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            playerCruiser.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n\n        if (playerSubmarine.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          playerSubmarine.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            playerSubmarine.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n        \n        if (playerDestroyer.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          playerDestroyer.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            playerDestroyer.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n\n      } \n      \n      if (targetFound === false) {\n        computerPlayerMissedShots.push(xCoordinateChosenByEnemy);\n        computerPlayerMissedShots.push(yCoordinateChosenByEnemy);\n      }\n    }\n\n\n    return { playerBattleship, playerCruiser, playerSubmarine, playerCarrier, \n      playerDestroyer, receiveComputerAttack, computerPlayerMissedShots};\n  }\n\n\n  const computerGameBoard = () => {\n\n    let computerCarrierArray = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    const computerCarrier = Ship(\"carrier\", computerCarrierArray);\n    \n    let computerBattleshipArray = [1, 1, 2, 1, 3, 1, 4, 1, 5, 1];\n    const computerBattleship = Ship(\"battleship\", computerBattleshipArray);\n    \n    let computerCruiserArray = [1, 2, 2, 2, 3, 2];\n    const computerCruiser = Ship(\"cruiser\", computerCruiserArray);\n    \n    let computerSubmarineArray = [1, 3, 2, 3, 3, 3];\n    const computerSubmarine = Ship(\"submarine\", computerSubmarineArray);\n    \n    let computerDestroyerArray = [1, 4, 2, 4];\n    const computerDestroyer = Ship(\"destroyer\", computerDestroyerArray);\n    \n\n    let playerMissedShots = [];\n\n    const receivePlayerAttack = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n\n      let targetFound = false;\n\n      for (let i = 0; i < computerCarrier.shipCoordinates.length; i++) {\n        \n        if (computerCarrier.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n\n        if (computerBattleship.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n\n        if (computerCruiser.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n\n        if (computerSubmarine.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n\n        if (computerDestroyer.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n            targetFound = true;\n        }\n      } \n      \n      if (targetFound === false) {\n        playerMissedShots.push(xCoordinateChosenByEnemy);\n        playerMissedShots.push(yCoordinateChosenByEnemy);\n      }\n    }\n\n    \n\n    return {computerCarrier, computerBattleship, computerCruiser, computerSubmarine, computerDestroyer, \n      receivePlayerAttack, \n      playerMissedShots}\n  }\n\n\n  const computerShips = computerGameBoard();\n\n  const player = (x, y) => { \n    computerShips.receivePlayerAttack(x,y);\n  \n  }\n\n\n  export const playerShips = playerGameBoard();\n\n  export const computerPlayer = () => {\n\n    let allComputerChoices = [9,9,8,8];\n    \n    let computerChoice = [];\n    \n    function randomNum() {\n\n      //computerChoice.push(Math.floor(Math.random() * Math.floor(11)));\n      //computerChoice.push(Math.floor(Math.random() * Math.floor(11)));\n      computerChoice.push(9);\n      computerChoice.push(8);\n\n\n    }\n\n    while(computerChoice.length < 2) {\n\n      randomNum();\n    \n    }\n \n    \n    let counter = 0;\n\n    for (let i = 0; i < allComputerChoices.length;i += 2) {\n      if (allComputerChoices[i] !== computerChoice[0] && allComputerChoices[i + 1] !== computerChoice[1]) {\n        counter += 1;        \n      } \n    }\n\n    if (counter === allComputerChoices.length * 0.5) {\n      allComputerChoices = allComputerChoices.concat(computerChoice);\n      playerShips.receiveComputerAttack(computerChoice[0], computerChoice[1]);\n    } \n\n    allComputerChoices = allComputerChoices.concat(computerChoice);\n    \n    computerChoice = [];\n\n    return{counter, computerChoice, allComputerChoices}\n  }\n\n\n\n  \n\n\n  \n\n\n\n"]},"metadata":{},"sourceType":"module"}