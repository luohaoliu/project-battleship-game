{"ast":null,"code":"var _jsxFileName = \"/Users/loulau/Documents/react/project-battleship-game/src/App.js\";\nimport './App.css';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  const Ship = (shipName, shipArray) => {\n    let shipCoordinates = [];\n    let j = 0;\n\n    while (j < shipArray.length) {\n      shipCoordinates.push({\n        xCoordinate: shipArray[j],\n        yCoordinate: shipArray[j + 1],\n        hit: false,\n        sink: false,\n        name: shipName\n      });\n      j += 2;\n    }\n\n    const isSunk = () => {\n      let counter = 0;\n\n      for (let i = 0; i < shipCoordinates.length; i++) {\n        if (shipCoordinates[i].hit === true) {\n          counter++;\n        }\n      }\n\n      if (counter === shipCoordinates.length) {\n        for (let i = 0; i < shipCoordinates.length; i++) {\n          shipCoordinates[i].sink = true;\n        }\n      }\n    };\n\n    const hit = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n      for (let i = 0; i < shipCoordinates.length; i++) {\n        if (shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          shipCoordinates[i].hit = true;\n        }\n      }\n\n      isSunk();\n    };\n\n    return {\n      shipCoordinates,\n      hit\n    };\n  };\n\n  const playerGameBoard = () => {\n    let allPlayerShipsAreSunk = [];\n    let playerCarrierArray = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    const playerCarrier = Ship(\"carrier\", playerCarrierArray);\n    let playerBattleshipArray = [1, 1, 2, 1, 3, 1, 4, 1, 5, 1];\n    const playerBattleship = Ship(\"battleship\", playerBattleshipArray);\n    let playerCruiserArray = [1, 2, 2, 2, 3, 2];\n    const playerCruiser = Ship(\"cruiser\", playerCruiserArray);\n    let playerSubmarineArray = [1, 3, 2, 3, 3, 3];\n    const playerSubmarine = Ship(\"submarine\", playerSubmarineArray);\n    let playerDestroyerArray = [1, 4, 2, 4];\n    const playerDestroyer = Ship(\"destroyer\", playerDestroyerArray);\n    let computerPlayerMissedShots = [];\n\n    const receiveComputerAttack = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n      let targetFound = false;\n\n      for (let i = 0; i < playerCarrier.shipCoordinates.length; i++) {\n        if (playerCarrier.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          playerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allPlayerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      for (let i = 0; i < playerBattleship.shipCoordinates.length; i++) {\n        if (playerBattleship.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerBattleship.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          playerBattleship.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allPlayerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      for (let i = 0; i < playerCruiser.shipCoordinates.length; i++) {\n        if (playerCruiser.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerCruiser.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          playerCruiser.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allPlayerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      for (let i = 0; i < playerSubmarine.shipCoordinates.length; i++) {\n        if (playerSubmarine.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerSubmarine.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          playerSubmarine.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allPlayerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      for (let i = 0; i < playerDestroyer.shipCoordinates.length; i++) {\n        if (playerDestroyer.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && playerDestroyer.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          playerDestroyer.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allPlayerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      if (targetFound === false) {\n        computerPlayerMissedShots.push(xCoordinateChosenByEnemy);\n        computerPlayerMissedShots.push(yCoordinateChosenByEnemy);\n      }\n    };\n\n    return {\n      playerBattleship,\n      playerCruiser,\n      playerSubmarine,\n      playerCarrier,\n      playerDestroyer,\n      receiveComputerAttack,\n      computerPlayerMissedShots,\n      allPlayerShipsAreSunk\n    };\n  };\n\n  const computerGameBoard = () => {\n    let allComputerShipsAreSunk = [];\n    let computerCarrierArray = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    const computerCarrier = Ship(\"carrier\", computerCarrierArray);\n    let computerBattleshipArray = [1, 1, 2, 1, 3, 1, 4, 1, 5, 1];\n    const computerBattleship = Ship(\"battleship\", computerBattleshipArray);\n    let computerCruiserArray = [1, 2, 2, 2, 3, 2];\n    const computerCruiser = Ship(\"cruiser\", computerCruiserArray);\n    let computerSubmarineArray = [1, 3, 2, 3, 3, 3];\n    const computerSubmarine = Ship(\"submarine\", computerSubmarineArray);\n    let computerDestroyerArray = [1, 4, 2, 4];\n    const computerDestroyer = Ship(\"destroyer\", computerDestroyerArray);\n    let playerMissedShots = [];\n\n    const receivePlayerAttack = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n      let targetFound = false;\n\n      for (let i = 0; i < computerCarrier.shipCoordinates.length; i++) {\n        if (computerCarrier.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allComputerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      for (let i = 0; i < computerBattleship.shipCoordinates.length; i++) {\n        if (computerBattleship.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerBattleship.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          computerBattleship.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allComputerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      for (let i = 0; i < computerCruiser.shipCoordinates.length; i++) {\n        if (computerCruiser.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerCruiser.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          computerCruiser.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allComputerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      for (let i = 0; i < computerSubmarine.shipCoordinates.length; i++) {\n        if (computerSubmarine.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerSubmarine.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          computerSubmarine.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allComputerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      for (let i = 0; i < computerDestroyer.shipCoordinates.length; i++) {\n        if (computerDestroyer.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && computerDestroyer.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n          computerDestroyer.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy);\n          targetFound = true;\n          allComputerShipsAreSunk.push(\"hit\");\n        }\n      }\n\n      if (targetFound === false) {\n        playerMissedShots.push(xCoordinateChosenByEnemy);\n        playerMissedShots.push(yCoordinateChosenByEnemy);\n      }\n    };\n\n    return {\n      computerCarrier,\n      computerBattleship,\n      computerCruiser,\n      computerSubmarine,\n      computerDestroyer,\n      receivePlayerAttack,\n      playerMissedShots,\n      allComputerShipsAreSunk\n    };\n  };\n\n  const computerShips = computerGameBoard();\n\n  const player = () => {\n    let allPlayerChoices = [];\n    let playerChoice = [];\n\n    function askForPlayerInput() {\n      /*\n      let x = prompt(\"please enter a X-coordinate value\");\n      let y = prompt(\"please enter a Y-coordinate value\");\n      */\n      let x = 1;\n      let y = 0;\n      playerChoice.push(x);\n      playerChoice.push(y);\n    }\n\n    while (playerChoice.length < 2) {\n      askForPlayerInput();\n    }\n\n    let count = 0;\n\n    for (let i = 0; i < allPlayerChoices.length; i += 2) {\n      if (allPlayerChoices[i] !== playerChoice[0] || allPlayerChoices[i + 1] !== playerChoice[1]) {\n        count += 1;\n      }\n    }\n\n    if (count === allPlayerChoices.length * 0.5) {\n      allPlayerChoices = allPlayerChoices.concat(playerChoice);\n      computerShips.receivePlayerAttack(playerChoice[0], playerChoice[1]);\n    } else {\n      allPlayerChoices = allPlayerChoices.concat(playerChoice);\n    }\n\n    playerChoice = [];\n    return {\n      count,\n      playerChoice,\n      allPlayerChoices\n    };\n  };\n\n  const playerShips = playerGameBoard();\n\n  const computerPlayer = () => {\n    let allComputerChoices = [];\n    let computerChoice = [];\n\n    function randomNum() {\n      computerChoice.push(Math.floor(Math.random() * Math.floor(11)));\n    }\n\n    while (computerChoice.length < 2) {\n      randomNum();\n    }\n\n    let counter = 0;\n\n    for (let i = 0; i < allComputerChoices.length; i += 2) {\n      if (allComputerChoices[i] !== computerChoice[0] || allComputerChoices[i + 1] !== computerChoice[1]) {\n        counter += 1;\n      }\n    }\n\n    if (counter === allComputerChoices.length * 0.5) {\n      allComputerChoices = allComputerChoices.concat(computerChoice);\n      playerShips.receiveComputerAttack(computerChoice[0], computerChoice[1]);\n    } else {\n      allComputerChoices = allComputerChoices.concat(computerChoice);\n    }\n\n    computerChoice = [];\n    return {\n      counter,\n      computerChoice,\n      allComputerChoices\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Project Battleship Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"grid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 7\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/loulau/Documents/react/project-battleship-game/src/App.js"],"names":["React","App","Ship","shipName","shipArray","shipCoordinates","j","length","push","xCoordinate","yCoordinate","hit","sink","name","isSunk","counter","i","xCoordinateChosenByEnemy","yCoordinateChosenByEnemy","playerGameBoard","allPlayerShipsAreSunk","playerCarrierArray","playerCarrier","playerBattleshipArray","playerBattleship","playerCruiserArray","playerCruiser","playerSubmarineArray","playerSubmarine","playerDestroyerArray","playerDestroyer","computerPlayerMissedShots","receiveComputerAttack","targetFound","computerGameBoard","allComputerShipsAreSunk","computerCarrierArray","computerCarrier","computerBattleshipArray","computerBattleship","computerCruiserArray","computerCruiser","computerSubmarineArray","computerSubmarine","computerDestroyerArray","computerDestroyer","playerMissedShots","receivePlayerAttack","computerShips","player","allPlayerChoices","playerChoice","askForPlayerInput","x","y","count","concat","playerShips","computerPlayer","allComputerChoices","computerChoice","randomNum","Math","floor","random"],"mappings":"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","sourcesContent":["import './App.css'\nimport React from 'react';\n \nconst App = () => {\n\n  const Ship = (shipName, shipArray) => {\n      \n      let shipCoordinates = [];\n      \n      let j = 0;\n\n      while (j < shipArray.length) {\n\n        shipCoordinates.push({xCoordinate: shipArray[j], yCoordinate: shipArray[j+1], \n          hit: false, sink: false, name: shipName });\n\n        j += 2;\n\n      }\n\n      const isSunk = () => {\n        let counter = 0;\n        for (let i = 0; i < shipCoordinates.length; i++) {\n          if (shipCoordinates[i].hit === true) {\n            counter++;\n          }\n        }\n        if (counter === shipCoordinates.length) {\n          for (let i = 0; i < shipCoordinates.length; i++) {\n            shipCoordinates[i].sink = true;\n              \n          }\n        }\n      };\n      \n\n      const hit = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {  \n\n        for (let i = 0; i < shipCoordinates.length; i++) {\n          if (shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n          shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n            shipCoordinates[i].hit = true;\n          }\n        }\n\n        isSunk(); \n        \n      };\n      \n    \n      return {shipCoordinates, hit}; \n    \n    }\n\n\n    const playerGameBoard = () => {\n\n      let allPlayerShipsAreSunk = [];\n      \n      let playerCarrierArray = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n      const playerCarrier = Ship(\"carrier\", playerCarrierArray);\n\n      let playerBattleshipArray = [1, 1, 2, 1, 3, 1, 4, 1, 5, 1];\n      const playerBattleship = Ship(\"battleship\", playerBattleshipArray);\n\n      let playerCruiserArray = [1, 2, 2, 2, 3, 2];\n      const playerCruiser = Ship(\"cruiser\", playerCruiserArray);\n      \n      let playerSubmarineArray = [1, 3, 2, 3, 3, 3];\n      const playerSubmarine = Ship(\"submarine\", playerSubmarineArray);\n        \n      let playerDestroyerArray = [1, 4, 2, 4];\n      const playerDestroyer = Ship(\"destroyer\", playerDestroyerArray);\n      \n      let computerPlayerMissedShots = [];\n      \n\n      const receiveComputerAttack = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n\n        let targetFound = false;\n\n        for (let i = 0; i < playerCarrier.shipCoordinates.length; i++) {\n          \n          if (playerCarrier.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            playerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              playerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allPlayerShipsAreSunk.push(\"hit\");\n          }\n        }\n        \n        for (let i = 0; i < playerBattleship.shipCoordinates.length; i++) {\n\n          if (playerBattleship.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            playerBattleship.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              playerBattleship.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allPlayerShipsAreSunk.push(\"hit\");\n          }\n        }\n\n        for (let i = 0; i < playerCruiser.shipCoordinates.length; i++) {\n\n          if (playerCruiser.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            playerCruiser.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              playerCruiser.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allPlayerShipsAreSunk.push(\"hit\");\n          }\n        }\n\n        for (let i = 0; i < playerSubmarine.shipCoordinates.length; i++) {\n\n          if (playerSubmarine.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            playerSubmarine.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              playerSubmarine.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allPlayerShipsAreSunk.push(\"hit\");\n          }\n        }\n\n        for (let i = 0; i < playerDestroyer.shipCoordinates.length; i++) {\n          \n          if (playerDestroyer.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            playerDestroyer.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              playerDestroyer.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allPlayerShipsAreSunk.push(\"hit\");\n          }\n\n        } \n        \n        if (targetFound === false) {\n          computerPlayerMissedShots.push(xCoordinateChosenByEnemy);\n          computerPlayerMissedShots.push(yCoordinateChosenByEnemy);\n        }\n      }\n\n      return { playerBattleship, playerCruiser, playerSubmarine, playerCarrier, \n        playerDestroyer, receiveComputerAttack, computerPlayerMissedShots, allPlayerShipsAreSunk};\n    }\n\n\n    const computerGameBoard = () => {\n\n      let allComputerShipsAreSunk = [];\n\n      let computerCarrierArray = [1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n      const computerCarrier = Ship(\"carrier\", computerCarrierArray);\n      \n      let computerBattleshipArray = [1, 1, 2, 1, 3, 1, 4, 1, 5, 1];\n      const computerBattleship = Ship(\"battleship\", computerBattleshipArray);\n      \n      let computerCruiserArray = [1, 2, 2, 2, 3, 2];\n      const computerCruiser = Ship(\"cruiser\", computerCruiserArray);\n      \n      let computerSubmarineArray = [1, 3, 2, 3, 3, 3];\n      const computerSubmarine = Ship(\"submarine\", computerSubmarineArray);\n      \n      let computerDestroyerArray = [1, 4, 2, 4];\n      const computerDestroyer = Ship(\"destroyer\", computerDestroyerArray);\n      \n\n      let playerMissedShots = [];\n\n      const receivePlayerAttack = (xCoordinateChosenByEnemy, yCoordinateChosenByEnemy) => {\n\n        let targetFound = false;\n\n        \n\n        for (let i = 0; i < computerCarrier.shipCoordinates.length; i++) {\n          \n          if (computerCarrier.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            computerCarrier.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              computerCarrier.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allComputerShipsAreSunk.push(\"hit\");\n          }\n        }\n\n        for (let i = 0; i < computerBattleship.shipCoordinates.length; i++) {\n\n          if (computerBattleship.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            computerBattleship.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              computerBattleship.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allComputerShipsAreSunk.push(\"hit\");\n          }\n        }\n\n        for (let i = 0; i < computerCruiser.shipCoordinates.length; i++) {\n\n          if (computerCruiser.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            computerCruiser.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              computerCruiser.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allComputerShipsAreSunk.push(\"hit\");\n          }\n        }\n\n        for (let i = 0; i < computerSubmarine.shipCoordinates.length; i++) {\n\n          if (computerSubmarine.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            computerSubmarine.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              computerSubmarine.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allComputerShipsAreSunk.push(\"hit\");\n          }\n        }\n\n        for (let i = 0; i < computerDestroyer.shipCoordinates.length; i++) {\n\n          if (computerDestroyer.shipCoordinates[i].xCoordinate === xCoordinateChosenByEnemy && \n            computerDestroyer.shipCoordinates[i].yCoordinate === yCoordinateChosenByEnemy) {\n              computerDestroyer.hit(xCoordinateChosenByEnemy, yCoordinateChosenByEnemy); \n              targetFound = true;\n              allComputerShipsAreSunk.push(\"hit\");\n          }\n        } \n        \n        if (targetFound === false) {\n          playerMissedShots.push(xCoordinateChosenByEnemy);\n          playerMissedShots.push(yCoordinateChosenByEnemy);\n        }\n        \n      }\n      \n      \n      return {computerCarrier, computerBattleship, computerCruiser, computerSubmarine, computerDestroyer, \n        receivePlayerAttack, \n        playerMissedShots, allComputerShipsAreSunk}\n    }\n\n\n\n    const computerShips = computerGameBoard();\n\n    const player = () => { \n\n      let allPlayerChoices = [];\n      \n      let playerChoice = [];\n      \n      function askForPlayerInput() {\n\n        /*\n        let x = prompt(\"please enter a X-coordinate value\");\n        let y = prompt(\"please enter a Y-coordinate value\");\n        */\n        let x = 1;\n        let y = 0;\n\n        playerChoice.push(x);\n        playerChoice.push(y);\n\n      }\n\n      while(playerChoice.length < 2) {\n\n        askForPlayerInput();\n      \n      }\n  \n      \n      let count = 0;\n\n      for (let i = 0; i < allPlayerChoices.length; i += 2) {\n        if (allPlayerChoices[i] !== playerChoice[0] || allPlayerChoices[i + 1] !== playerChoice[1]) {\n          count += 1;        \n        } \n      }\n\n      if (count === allPlayerChoices.length * 0.5) {\n        allPlayerChoices = allPlayerChoices.concat(playerChoice);\n        computerShips.receivePlayerAttack(playerChoice[0], playerChoice[1]);\n\n      } else {\n\n        allPlayerChoices = allPlayerChoices.concat(playerChoice);\n      }\n\n      playerChoice = [];\n\n      return {count, playerChoice, allPlayerChoices}\n\n    }\n\n\n\n\n    const playerShips = playerGameBoard();\n\n    const computerPlayer = () => {\n\n      let allComputerChoices = [];\n      \n      let computerChoice = [];\n      \n      function randomNum() {\n\n        computerChoice.push(Math.floor(Math.random() * Math.floor(11)));\n\n      }\n\n      while(computerChoice.length < 2) {\n\n        randomNum();\n      \n      }\n  \n      \n      let counter = 0;\n\n      for (let i = 0; i < allComputerChoices.length;i += 2) {\n        if (allComputerChoices[i] !== computerChoice[0] || allComputerChoices[i + 1] !== computerChoice[1]) {\n          counter += 1;        \n        } \n      }\n\n      if (counter === allComputerChoices.length * 0.5) {\n        allComputerChoices = allComputerChoices.concat(computerChoice);\n        playerShips.receiveComputerAttack(computerChoice[0], computerChoice[1]);\n      } else {\n        allComputerChoices = allComputerChoices.concat(computerChoice);\n      }\n\n      computerChoice = [];\n\n      return {counter, computerChoice, allComputerChoices}\n  }\n    return(\n      <div>\n        <h1>Project Battleship Game</h1>\n        <div class=\"container\">\n          <div class=\"grid\"></div>\n          <div class=\"grid\"></div>\n          <div class=\"grid\"></div>\n          <div class=\"grid\"></div>\n          <div class=\"grid\"></div>\n          <div class=\"grid\"></div>\n        </div>\n\n      </div>\n    )\n}\n\n\nexport default App;\n  \n\n\n  \n\n\n\n"]},"metadata":{},"sourceType":"module"}